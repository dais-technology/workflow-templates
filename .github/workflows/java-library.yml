name: java-gradle-library
on:
  workflow_call:
    inputs:
      aws-role-to-assume:
        required: true
        type: string
      jdk:
        required: false      
        type: string
        default: "8"
      runner:
        required: false      
        type: string
        default: "ubuntu-latest"        
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
  checks: write
concurrency:
  group: ${{ github.action_repository || github.repository }}-${{ github.head_ref || github.ref_name }}      
jobs:
  build:
    if: github.actor != 'dais-machine'
    environment: dev
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DAIS_MACHINE_GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.jdk }}
          distribution: 'adopt'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws-role-to-assume }}
          aws-region: us-west-2
          role-session-name: AWSSession
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build with Gradle
        id: build
        continue-on-error: true        
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
        shell: bash
        run: |
          git config user.name ${{ secrets.DAIS_MACHINE_GITHUB_USERNAME }}
          git config user.email ${{ secrets.DAIS_MACHINE_GITHUB_EMAIL }}
          gitLog=$(git log -1 --pretty=%B | sed s/\'/\"/ | sed s/\"/\'/ | sed s/'→'/'->'/)
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "${GRADLE_PROPERTIES}" > ~/.gradle/gradle.properties
          git fetch --tags
          git status --porcelain
          CURRENT_VERSION=$(git describe --tags --abbrev=0)             
          #./gradlew test
          ./gradlew --refresh-dependencies version          
          if [[ "${{ inputs.hotfix }}" ==  "true" ]]; then
            ./gradlew version -x test
          else
            ./gradlew release -x test
          fi
          NEW_VERSION=$(git describe --tags --abbrev=0)          
          echo "::set-output name=gitLog::$gitLog"
          echo "::set-output name=currentVersion::$CURRENT_VERSION"
          echo "::set-output name=newVersion::$NEW_VERSION"
      - name: Retry Build with Gradle
        id: retry-build
        if: steps.build.outcome == 'failure'
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
        shell: bash
        run: |
          git config user.name ${{ secrets.DAIS_MACHINE_GITHUB_USERNAME }}
          git config user.email ${{ secrets.DAIS_MACHINE_GITHUB_EMAIL }}
          gitLog=$(git log -1 --pretty=%B | sed s/\'/\"/ | sed s/\"/\'/ | sed s/'→'/'->'/)
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "${GRADLE_PROPERTIES}" > ~/.gradle/gradle.properties
          git fetch --tags
          git status --porcelain
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
          NEW_VERSION=$(git describe --tags --abbrev=0 | awk -F. '{OFS="."; $NF+=1; print $0}')
          git tag $NEW_VERSION
          git push --tags
          ./gradlew --refresh-dependencies version
          ./gradlew release -x test
          NEW_VERSION=$(git describe --tags --abbrev=0)
          echo "::set-output name=gitLog::$gitLog"
          echo "::set-output name=currentVersion::$CURRENT_VERSION"
          echo "::set-output name=newVersion::$NEW_VERSION"          
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          require_tests: false
      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: 'build/test-results/test/TEST-*.xml'
          if-no-files-found: ignore
      - name: Publish
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')      
        id: publish
        run: |
          echo "Current version: ${{steps.build.outputs.currentVersion}}"
          echo "New version: ${{steps.build.outputs.newVersion}}"
          ./gradlew -x test artifactoryPublish
      - name: Read Version
        id: read_version
        uses: christian-draeger/read-properties@1.1.0
        with:
          path: 'version.txt'
          properties: 'build.version'
      - name: Read Project Name
        id: read_project_name
        uses: christian-draeger/read-properties@1.1.0
        with:
          path: 'settings.gradle'
          properties: 'rootProject.name'

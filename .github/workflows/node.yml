name: Node build
on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      aws-role-to-assum:
        required: true
        type: string
      aws-ecr-us-west-2-registry:
        required: true
        type: string
    secrets:
      github-token:
        required: true
      dais-machine-github-username:
        required: true
      dais-machine-github-email:
        required: true
      jira-base-url:
        required: true
      jira-user-email:
        required: true
      jira-api-token:
        required: true
      jf-url:
        required: true
      jf-user:
        required: true
      jf-password:
        required: true
      actions-aws-access-key-id: 
        required: true
      aws-secret-access-key:
        required: true
      npm-token:
        required: true
      fontawesome-token:
        required: true
      bit-auth-token:
        required: true
  workflow_dispatch:
permissions:
      id-token: write
      contents: read
jobs:
  build:
    if: github.actor != 'dais-machine'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.github-token }}
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
      - uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_URL: ${{ secrets.jf-url }}
          JF_USER: ${{ secrets.jf-user }}
          JF_PASSWORD: ${{ secrets.jf-password }}
      - run: |
          jf rt ping
      - name: Login
        uses: atlassian/gajira-login@master
        env:
          JIRA_BASE_URL: ${{ secrets.jira-base-url }}
          JIRA_USER_EMAIL: ${{ secrets.jira-user-email }}
          JIRA_API_TOKEN: ${{ secrets.jira-api-token }}   
      - name: Find in commit messages
        uses: atlassian/gajira-find-issue-key@master
        with:
          from: ${{ github.head_ref }}
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws-role-to-assum }}
          aws-region: us-west-2
          role-session-name: AWSSession
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - run: aws sts get-caller-identity          
      - name: Install Dependencies and Run Unit Tests
        id: npm-build
        run: |
          git config user.name ${{ secrets.dais-machine-github-username }}
          git config user.email ${{ secrets.dais-machine-github-email }}
          gitLog=$(git log -1 --pretty=%B | sed s/\'/\"/ | sed s/\"/\'/ | sed s/'â†’'/'->'/)
          npm ci --ignore-scripts
          npm run test
          version=$(npm version patch)
          echo "New version is $version"
          git push origin master --tags
          repositoryName=$(node -pe "require('./package.json').name")
          echo "::set-output name=imageVersion::$version"
          echo "::set-output name=projectName=$repositoryName"
          echo "::set-output name=gitLog::$gitLog"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-token }}
      - name: Build, tag, and push docker image to Amazon ECR     
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ steps.npm-build.outputs.projectName }} 
          VERSION: ${{ steps.npm-build.outputs.imageVersion }}       
        run: |
          docker build -t ${{ inputs.aws-ecr-us-west-2-registry }}/$REPOSITORY:$VERSION --build-arg AWS_ACCESS_KEY_ID=${{ secrets.actions-aws-access-key-id }} --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.actions-aws-secret-access-key }} --build-arg NPM_TOKEN_READ=${{ secrets.npm-token }} --build-arg FORTAWESOME_TOKEN=${{ secrets.fontawesome-token }} --build-arg BIT_AUTH_TOKEN=${{ secrets.bit-auth-token }} .
          docker push ${{ inputs.aws-ecr-us-west-2-registry }}/$REPOSITORY:$VERSION
      - name: Push values.yaml to DAIS S3
        run: |
          cat values.yaml > values-${VERSION}.yaml
          echo 'image: ' >> values-${VERSION}.yaml
          echo '   repository: '991853876083.dkr.ecr.us-west-2.amazonaws.com/${PROJECT_NAME} >> values-${VERSION}.yaml
          echo '   pullPolicy: 'Always >> values-${PROJECT_NAME}.yaml
          echo '   tag: '${VERSION} >> values-${VERSION}.yaml          
          aws s3 cp values-${VERSION}.yaml s3://dais-helm-charts/packagevalues/${PROJECT_NAME}/values-${VERSION}.yaml
          sed -i -e 's/all-dais-com-tls/all-dais-jm-com-tls/; s/dais.com/dais-jm.com/;' values-${VERSION}.yaml
          aws s3 cp values-${VERSION}.yaml s3://jm-helm-charts/packagevalues/${PROJECT_NAME}/values-${VERSION}.yaml
        with:
          AWS_REGION: ${{ secrets.ACTIONS_AWS_REGION }}
          VERSION: ${{ steps.npm-build.outputs.imageVersion }}
          PROJECT_NAME: ${{ steps.npm-build.outputs.projectName }}
      - name: Deploy To Dev
        id: deploy-to-dev
        uses: gagoar/invoke-aws-lambda@master
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.ACTIONS_AWS_REGION }}
          FunctionName: spinnaker-trigger-dev-deployer
          Payload: '{"application": "${{ steps.npm-build.outputs.projectName }}", "tag": "${{ steps.npm-build.outputs.imageVersion }}", "gitLog": "${{ steps.npm-build.outputs..gitLog }}", "repositoryName": "${{ github.repository }}"}' 


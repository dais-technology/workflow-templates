name: java-gradle-build
on:
  workflow_call:
    inputs:
      aws-role-to-assume:
        required: true
        type: string
      jdk:
        required: false      
        type: string
        default: "11"
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
jobs:
  build:
    if: github.actor != 'dais-machine'
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Build with Gradle
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
        shell: bash
        run: |
          echo ${{ secrets.GRADLE_PROPERTIES }}
          echo ${{ secrets.DAIS_MACHINE_GITHUB_TOKEN }}
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DAIS_MACHINE_GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.jdk }}
          distribution: 'adopt'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws-role-to-assume }}
          aws-region: us-west-2
          role-session-name: AWSSession
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build with Gradle
        id: build
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
        shell: bash
        run: |
          git config user.name ${{ secrets.DAIS_MACHINE_GITHUB_USERNAME }}
          git config user.email ${{ secrets.DAIS_MACHINE_GITHUB_EMAIL }}
          gitLog=$(git log -1 --pretty=%B | sed s/\'/\"/ | sed s/\"/\'/ | sed s/'â†’'/'->'/)
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "${GRADLE_PROPERTIES}" > ~/.gradle/gradle.properties
          git fetch --tags
          git status --porcelain
          ./gradlew --refresh-dependencies version
          ./gradlew release -x test
           echo "::set-output name=gitLog::$gitLog"
      - name: Read Version
        id: read_version
        uses: christian-draeger/read-properties@1.1.0
        with:
          path: 'version.txt'
          properties: 'build.version'
      - name: Read Project Name
        id: read_project_name
        uses: christian-draeger/read-properties@1.1.0
        with:
          path: 'settings.gradle'
          properties: 'rootProject.name'
      - name: Publish
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')      
        id: publish
        run: |
          echo ${{ steps.read_version.outputs.build-version }}
          echo ${{ steps.read_project_name.outputs.rootProject-name }}
          ./gradlew -x test artifactoryPublish pushDocker
      - name: Push values.yaml to DAIS s3
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')      
        run: |
          project_name=${{ steps.read_project_name.outputs.rootProject-name }}
          if [[ "$project_name" == 'jm-warranty-claim' ]]; then
              project_name='camunda'
          fi
          cat values.yaml > values-${{ steps.read_version.outputs.build-version }}.yaml
          echo 'image: ' >> values-${{ steps.read_version.outputs.build-version }}.yaml
          echo '   repository: '991853876083.dkr.ecr.us-west-2.amazonaws.com/${project_name} >> values-${{ steps.read_version.outputs.build-version }}.yaml
          echo '   pullPolicy: 'Always >> values-${{ steps.read_version.outputs.build-version }}.yaml
          echo '   tag: '${{ steps.read_version.outputs.build-version }} >> values-${{ steps.read_version.outputs.build-version }}.yaml          
          aws s3 cp values-${{ steps.read_version.outputs.build-version }}.yaml s3://dais-helm-charts/packagevalues/${project_name}/values-${{ steps.read_version.outputs.build-version }}.yaml
          sed -i -e 's/all-dais-com-tls/all-dais-jm-com-tls/; s/dais.com/dais-jm.com/;' values-${{ steps.read_version.outputs.build-version }}.yaml
          aws s3 cp values-${{ steps.read_version.outputs.build-version }}.yaml s3://jm-helm-charts/packagevalues/${project_name}/values-${{ steps.read_version.outputs.build-version }}.yaml
        env:
          AWS_REGION: ${{ secrets.ACTIONS_AWS_REGION }}
      - name: Deploy To Dev
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
        id: deploy-to-dev
        uses: gagoar/invoke-aws-lambda@master
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.ACTIONS_AWS_REGION }}
          FunctionName: spinnaker-trigger-dev-deployer
          Payload: '{"application": "${{ steps.read_project_name.outputs.rootProject-name }}", "tag": "${{ steps.read_version.outputs.build-version }}", "gitLog": "${{ steps.build.outputs.gitLog }}", "repositoryName": "${{ github.repository }}"}'
      - name: Trigger SDK Build
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
        run: |
          CRUMB=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN}}" 'https://${{ secrets.JENKINS_URL}}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')
          curl -X POST -s -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} -H "$CRUMB" https://${{ secrets.JENKINS_URL}}/job/dais-technology/job/javascript-sdk-minimal/job/master/buildWithParameters?force=true

name: java-gradle-build
on:
  workflow_call:
    inputs:
      hotfix:
        required: false
        type: boolean
        default: false
      aws-role-to-assume:
        required: true
        type: string
        default: "arn:aws:iam::991853876083:role/spiderman-eks-master-NodeInstanceRole-1CGN6EINNA20W"
      jdk:
        required: false
        type: string
        default: "8"
      runner:
        required: false
        type: string
        default: "ubuntu-latest"
      account:
        required: false
        type: string
        default: "DAIS_JM"
      environment:
        required: false
        type: string
        default: "dev"
  workflow_dispatch:
    inputs:
      hotfix:
        required: false
        type: boolean
        default: false
      aws-role-to-assume:
        required: true
        type: string
        default: "arn:aws:iam::991853876083:role/spiderman-eks-master-NodeInstanceRole-1CGN6EINNA20W"
      jdk:
        required: false
        type: string
        default: "8"
      runner:
        required: false
        type: string
        default: "ubuntu-latest"
      account:
        required: false
        type: string
        default: "DAIS_JM"
      environment:
        required: false
        type: string
        default: "dev"
permissions:
  id-token: write
  contents: read
  checks: write
concurrency:
  group: ${{ github.action_repository || github.repository }}-${{ github.head_ref || github.ref_name }}    
jobs:
  build:
    if: github.actor != 'dais-machine'
    environment: dev
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.DAIS_MACHINE_GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.jdk }}
          distribution: "adopt"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws-role-to-assume }}
          aws-region: us-west-2
          role-session-name: AWSSession
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build with Gradle
        id: build
        continue-on-error: true
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
        shell: bash
        run: |
          git config user.name ${{ secrets.DAIS_MACHINE_GITHUB_USERNAME }}
          git config user.email ${{ secrets.DAIS_MACHINE_GITHUB_EMAIL }}
          gitLog=$(git log -1 --pretty=%B | sed s/\'/\"/ | sed s/\"/\'/ | sed s/'→'/'->'/)
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "${GRADLE_PROPERTIES}" > ~/.gradle/gradle.properties
          git fetch --tags
          git status --porcelain
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
          NEW_VERSION=$CURRENT_VERSION
          default_branch=$(git branch --show-current)
          if [[ "$default_branch" == "master" || "$default_branch" == "main" || "$default_branch" == "develop" || "${{ inputs.hotfix }}" ==  "true" ]]; then
            ./gradlew --refresh-dependencies version
            ./gradlew release -x test
            NEW_VERSION=$(git describe --tags --abbrev=0)     
          fi
          echo "::set-output name=gitLog::$gitLog"
          echo "::set-output name=currentVersion::$CURRENT_VERSION"
          echo "::set-output name=newVersion::$NEW_VERSION"          
      - name: Retry Build with Gradle
        id: retry-build
        if: steps.build.outcome == 'failure'
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
        shell: bash
        run: |
          git config user.name ${{ secrets.DAIS_MACHINE_GITHUB_USERNAME }}
          git config user.email ${{ secrets.DAIS_MACHINE_GITHUB_EMAIL }}
          gitLog=$(git log -1 --pretty=%B | sed s/\'/\"/ | sed s/\"/\'/ | sed s/'→'/'->'/)
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "${GRADLE_PROPERTIES}" > ~/.gradle/gradle.properties
          git fetch --tags
          git status --porcelain
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
          NEW_VERSION=$(git describe --tags --abbrev=0 | awk -F. '{OFS="."; $NF+=1; print $0}')
          git tag $NEW_VERSION
          git push --tags
          git fetch --tags
          git status --porcelain          
          default_branch=$(git branch --show-current)
          if [[ "$default_branch" == "master" || "$default_branch" == "main" || "$default_branch" == "develop" || "${{ inputs.hotfix }}" ==  "true" ]]; then
            ./gradlew --refresh-dependencies version
            ./gradlew release -x test
            NEW_VERSION=$(git describe --tags --abbrev=0)     
          fi
          NEW_VERSION=$(git describe --tags --abbrev=0)
          echo "::set-output name=gitLog::$gitLog"
          echo "::set-output name=currentVersion::$CURRENT_VERSION"
          echo "::set-output name=newVersion::$NEW_VERSION"
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: "**/build/test-results/test/TEST-*.xml"
          require_tests: false
      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: "build/test-results/test/TEST-*.xml"
          if-no-files-found: ignore
      - name: Publish
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') || inputs.hotfix
        id: publish
        run: |
          echo "Current version: ${{steps.build.outputs.currentVersion}}"
          echo "New version: ${{steps.build.outputs.newVersion}}"
          if [[ ${{steps.build.outputs.currentVersion}} != ${{steps.build.outputs.newVersion}} ]]; then
            ./gradlew -x test artifactoryPublish pushDocker
          else
            echo "Nothing to do"
          fi
      - name: Read Version
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') || inputs.hotfix      
        id: read_version
        uses: christian-draeger/read-properties@1.1.0
        with:
          path: "version.txt"
          properties: "build.version"
      - name: Read Project Name
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') || inputs.hotfix      
        id: read_project_name
        uses: christian-draeger/read-properties@1.1.0
        with:
          path: "settings.gradle"
          properties: "rootProject.name"
      - name: Push values.yaml to DAIS s3
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') || inputs.hotfix
        run: |
          project_name=${{ steps.read_project_name.outputs.rootProject-name }}
          if [[ "$project_name" == 'jm-warranty-claim' ]]; then
              project_name='camunda'
          fi
          cat values.yaml > values-${{ steps.read_version.outputs.build-version }}.yaml
          echo 'image: ' >> values-${{ steps.read_version.outputs.build-version }}.yaml
          echo '   repository: '991853876083.dkr.ecr.us-west-2.amazonaws.com/${project_name} >> values-${{ steps.read_version.outputs.build-version }}.yaml
          echo '   pullPolicy: 'Always >> values-${{ steps.read_version.outputs.build-version }}.yaml
          echo '   tag: '${{ steps.read_version.outputs.build-version }} >> values-${{ steps.read_version.outputs.build-version }}.yaml          
          aws s3 cp values-${{ steps.read_version.outputs.build-version }}.yaml s3://dais-helm-charts/packagevalues/${project_name}/values-${{ steps.read_version.outputs.build-version }}.yaml
          sed -i -e 's/all-dais-com-tls/all-dais-jm-com-tls/; s/dais.com/dais-jm.com/;' values-${{ steps.read_version.outputs.build-version }}.yaml
          aws s3 cp values-${{ steps.read_version.outputs.build-version }}.yaml s3://jm-helm-charts/packagevalues/${project_name}/values-${{ steps.read_version.outputs.build-version }}.yaml
        env:
          AWS_REGION: ${{ secrets.ACTIONS_AWS_REGION }}
      - name: Create Application and Pipelines - DAIS
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') || inputs.hotfix
        id: create-app-and-pipelines-dais
        uses: gagoar/invoke-aws-lambda@master
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.ACTIONS_AWS_REGION }}
          FunctionName: spinnaker-pipelines-dev-deployer
          Payload: '{"application": "${{ steps.read_project_name.outputs.rootProject-name }}", "template": "backend-spring", "account": "DAIS", "tag": "${{ steps.read_version.outputs.build-version }}"}'
      - name: Deploy To Dev
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') || inputs.hotfix
        id: deploy-to-dev
        uses: gagoar/invoke-aws-lambda@master
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_AWS_SECRET_ACCESS_KEY }}
          REGION: ${{ secrets.ACTIONS_AWS_REGION }}
          FunctionName: spinnaker-trigger-dev-deployer
          Payload: '{"application": "${{ steps.read_project_name.outputs.rootProject-name }}", "tag": "${{ steps.read_version.outputs.build-version }}", "gitLog": "${{ steps.build.outputs.gitLog }}", "repositoryName": "${{ github.repository }}", "account": "${{ inputs.account }}", "environment": "${{ inputs.environment }}"}'
